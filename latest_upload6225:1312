#include <Wire.h>
#include <Servo.h>

// ============================================================
//          1. CONTROLUL SHIFT REGISTER & VARIABILE
// ============================================================

// Pini pentru 74HC595 (shift register)
const int latchPin = 5;   // Conectat la RCLK (Pin 12 pe 74HC595)
const int clockPin = 6;   // Conectat la SRCLK (Pin 11 pe 74HC595)
const int dataPin = 4;    // Conectat la SER (Pin 14 pe 74HC595)
const int oePin = 3;      // Conectat la OE (Pin 13 pe 74HC595) – folosit pentru controlul vitezei (PWM)


const int LED7=7;
const int LED8=8;

bool ledState = LOW;

// Funcție: updateShiftRegister
// Trimite un byte către registrul de shift pentru a controla direcția mișcării.
void updateShiftRegister(byte data) {
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, data);
  digitalWrite(latchPin, HIGH);
}

// Funcție: setMotorSpeed
// Setează viteza motorului prin PWM pe pinul OE.
void setMotorSpeed(uint8_t speed) {
  analogWrite(oePin, speed);
}

// Funcție: getMovementByte
// Maparea unei comenzi (direction) la codul binar corespunzător mișcării.
uint8_t getMovementByte(uint8_t direction) {
  switch(direction) {
    case 0:  return 0b00000000; // STOP
    case 1:  return 0b01010101; // INAINTE (FORWARD)
    case 2:  return 0b10101010; // INAPOI (BACKWARD)
    case 3:  return 0b00001001; // DREAPTA-FATA (FRONT-RIGHT)
    case 4:  return 0b00000110; // STANGA-FATA (FRONT-LEFT)
    case 5:  return 0b10010000; // spatele se misca in dreapta (BACK-RIGHT)
    case 6:  return 0b01100000; // spatele se misca in stanga (BACK-LEFT)
    case 7:  return 0b01101001; // ROTIRE DREAPTA (ROTATE RIGHT)
    case 8:  return 0b10010110; // ROTIRE STANGA (ROTATE LEFT)
    case 9:  return 0b10011001; // LATERALA DREAPTA (SIDE-RIGHT)
    case 10: return 0b01100110; // LATERALA STANGA (SIDE-LEFT)
    case 11: return 0b01000001; // hard turn dreapta (HARD RIGHT TURN)
    case 12: return 0b00010100; // hard turn stanga (HARD LEFT TURN)
    case 13: return 0b10000010; // hard turn stanga miscare spate inapoi
    case 14: return 0b00101000; // hard turn dreapta miscare spate inapoi
    case 15: return 0b00010001; // diagonala stanga fata (DIAGONAL FRONT-LEFT)
    case 16: return 0b00100010; // diagonala spate dreapta (DIAGONAL BACK-RIGHT)
    case 17: return 0b01000100; // diagonala dreapta fata (DIAGONAL FRONT-RIGHT)
    case 18: return 0b10001000; // diagonala spate stanga (DIAGONAL BACK-LEFT)

      //SPECIAL CASE 

    case 19: return 0b00000001; // little to left (o singura roata)
    case 20: return 0b00000010; // little to right (o singura roata)

    default: return 0b00000000; // STOP implicit
  }
}


// ============================================================
//          2. CONTROLUL SERVOMOTOARELOR ȘI SENSORI
// ============================================================

// Pini și obiecte pentru servomotoare
int servo1Pin = 9;   // Pin PWM pentru Servo 1
int servo2Pin = 10;  // Pin PWM pentru Servo 2

Servo servo1;
Servo servo2;

// Pini pentru senzorii de curent aferenți servomotoarelor
const int servo1SensorPin = A1;  // Senzor curent Servo 1
const int servo2SensorPin = A2;  // Senzor curent Servo 2

// Pin pentru semnalizarea erorilor
const int errorPin = 2;  // LED sau semnal de eroare

// Unghiurile curente ale servomotoarelor
int servo1CurrentAngle = 0;
int servo2CurrentAngle = 0;


// ------------------------------------------------------------
// 2.1 Citirea curentului (Current Sensor Reading)
// ------------------------------------------------------------

// Funcție: readCurrentSensor
// Citește valoarea analogică de la un senzor, calculează media și determină curentul.
float readCurrentSensor(int sensorPin) {
  float samples = 0.0, avgVal = 0.0, currentVal = 0.0;
  float minVal = 1023, maxVal = 0;  
  for (int x = 0; x < 500; x++) {
    float sample = analogRead(sensorPin);
    samples += sample;
    if (sample < minVal) minVal = sample;
    if (sample > maxVal) maxVal = sample;
  }
  // Excludem cele mai mici și cele mai mari valori
  samples -= (minVal + maxVal);
  avgVal = samples / 498.0;
  // Calculăm curentul pe baza tensiunii medii
  currentVal = (2.5 - (avgVal * (5.0 / 1024.0))) / 0.185;
  return currentVal;
}

// Pragurile de curent pentru monitorizarea servomotoarelor
const float SERVO_FORWARD_THRESHOLD = 0.0100;
const float SERVO_BACKWARD_THRESHOLD = 0.0100;


// ------------------------------------------------------------
// 2.2 Mișcarea servomotoarelor cu monitorizarea curentului
// ------------------------------------------------------------

// Funcție: moveServoWithCurrentMonitoring
// Mișcă un servo de la un unghi curent către un unghi țintă,
// monitorizând curentul. Dacă curentul depășește un prag, servo-ul se retrage
// și încearcă din nou, de un număr limitat de ori.
bool moveServoWithCurrentMonitoring(Servo &servo, int &currentAngle, int targetAngle, int sensorPin) {
  int tries = 0;
  const int maxTries = 4;
  const int stepSize = 1;
  const int retractDegrees = 20;
  bool movingForward = (targetAngle > currentAngle);
  
  while (currentAngle != targetAngle && tries < maxTries) {
    bool thresholdTriggered = false;
    if (movingForward) {
      for (int angle = currentAngle; angle <= targetAngle; angle += stepSize) {
        if (angle > targetAngle) angle = targetAngle;
        servo.write(angle);
        delay(5);
        float currentVal = readCurrentSensor(sensorPin);
        if (currentVal >= SERVO_FORWARD_THRESHOLD) {
          thresholdTriggered = true;
          break;
        }
        currentAngle = angle;
        if (currentAngle == targetAngle) return true;
      }
    } else { // Mișcare înapoi
      for (int angle = currentAngle; angle >= targetAngle; angle -= stepSize) {
        if (angle < targetAngle) angle = targetAngle;
        servo.write(angle);
        delay(5);
        float currentVal = readCurrentSensor(sensorPin);
        if ((-1 * currentVal) >= SERVO_BACKWARD_THRESHOLD) {
          thresholdTriggered = true;
          break;
        }
        currentAngle = angle;
        if (currentAngle == targetAngle) return true;
      }
    }
    
    if (thresholdTriggered) {
      tries++;
      // Retragere pentru a reduce curentul înainte de a încerca din nou
      if (movingForward) {
        currentAngle = max(currentAngle - retractDegrees, 0);
      } else {
        currentAngle = min(currentAngle + retractDegrees, 180);
      }
      servo.write(currentAngle);
      delay(2000);
    }
  }
  
  // Dacă s-au epuizat încercările, se semnalează eroarea
  if (tries >= maxTries) {
    currentAngle = 0;
    servo.write(0);
    digitalWrite(errorPin, HIGH);
    return false;
  }
  
  return true;
}


// ------------------------------------------------------------
// 2.3 Handler pentru comenzile servomotoarelor
// ------------------------------------------------------------

// Funcție: handleServoCommand
// Procesează comanda primită pentru servomotoare. Comanda este un număr
// de 3 cifre: primele 2 cifre indică indexul servo-ului (ex. 180 pentru servo1, 181 pentru servo2),
// iar ultima cifră reprezintă unghiul țintă.
void handleServoCommand(uint16_t command) {
  uint8_t servoIndex = command / 100; // Ex: 180 pentru Servo 1, 181 pentru Servo 2
  uint8_t angle = command % 100;       // Unghiul țintă (0-99)
  
  switch (servoIndex) {
    case 180:
      moveServoWithCurrentMonitoring(servo1, servo1CurrentAngle, angle, servo1SensorPin);
      break;
    case 181:
      moveServoWithCurrentMonitoring(servo2, servo2CurrentAngle, angle, servo2SensorPin);
      break;
    default:
      break;
  }
}


// ============================================================
//          3. COMUNICAREA PRIN I2C & PRELUCRAREA DATELOR
// ============================================================

// Mod debug – dacă activ, comenzile sunt preluate ca valori numerice brute (0-255)
bool debugMode = false;

// Variabilă pentru gestionarea timeout-ului (oprirea mașinii în lipsa unei comenzi)
const unsigned long TIMEOUT_MS = 300;
unsigned long lastCommandTime = 0;

// Funcție: receiveEvent
// Aceasta este funcția handler apelată la recepția datelor I2C.
// Formatul datelor primite: 3 octeți
//   - Primul octet reprezintă viteza (PWM).
//   - Următorii doi octeți reprezintă comanda direcției sau comanda pentru servomotoare.
// În modul debug, comanda este interpretată ca o valoare 0-255 directă.
// În modul normal:
//   - Dacă valoarea combinată se află între 180 și 189, se procesează ca o comandă de servomotor.
//   - Altfel, se procesează ca o comandă de mișcare.
void receiveEvent(int howMany) {
  while (howMany >= 3) {
    uint8_t speed = Wire.read();
    uint8_t byte1 = Wire.read();
    uint8_t byte2 = Wire.read();
    howMany -= 3;
    
    // Se formează un număr de 16 biți din cei doi octeți pentru a reprezenta direcția/servomotorul.
    uint16_t direction = (byte1 << 8) | byte2;
    
    // Verificare pentru comanda de toggle debug:
    // Dacă speed este 7 și direcția este egală cu 56, se activează/dezactivează modul debug.
    if (speed == 255 && direction == 255) {

      ledState = !ledState;
      digitalWrite(LED7, ledState);
      debugMode = !debugMode;
      continue;
    }
    
    if (debugMode) {
      // În modul debug, comanda este prelucrată direct ca o valoare numerică (0-255)
      byte debugByte = direction & 0xFF; // Se folosește doar un octet
      setMotorSpeed(speed);
      digitalWrite(LED8, HIGH);
      delay(50);
      digitalWrite(LED8, LOW);
      updateShiftRegister(debugByte);

      delay(400);
      updateShiftRegister(0b00000000);
    } else {

      // În modul normal se prelucrează comenzile în funcție de valoare:
      if ( direction <= 20) {
        // Comandă pentru mișcarea mașinii
        setMotorSpeed(speed);
        byte movementByte = getMovementByte(direction);
        updateShiftRegister(movementByte);
        lastCommandTime = millis();
      }

       else if (direction >= 180 && direction <= 189) {
        // Comandă pentru servomotoare
        handleServoCommand(direction);
        


      } 

    }
    // Resetăm temporizatorul la fiecare comandă primită
    
  }
}


// ============================================================
//          4. FUNCȚIILE PRINCIPALE: SETUP ȘI LOOP
// ============================================================

void setup() {
  // ------------------------------
  // 4.1 Inițializare pini pentru 74HC595 (shift register)
  // ------------------------------
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(oePin, OUTPUT);
  

  pinMode(LED7, OUTPUT);
  pinMode(LED8, OUTPUT);
  // ------------------------------
  // 4.2 Inițializare pin pentru eroare
  // ------------------------------
  pinMode(errorPin, OUTPUT);
  digitalWrite(errorPin, LOW);
  
  // ------------------------------
  // 4.3 Atașarea servomotoarelor
  // ------------------------------
  servo1.attach(servo1Pin);
  servo2.attach(servo2Pin);
  
  // ------------------------------
  // 4.4 Inițializare PWM (viteza = 0)
  // ------------------------------
  analogWrite(oePin, 0);
  
  // Setăm registrul de shift la valoarea STOP (0b00000000)
  updateShiftRegister(0b00000000);
  
  // ------------------------------
  // 4.5 Inițializare comunicație I2C
  // ------------------------------
  Wire.begin(8);              // Adresa I2C a dispozitivului
  Wire.onReceive(receiveEvent); // Setăm handler-ul pentru recepția datelor I2C
  
  // Inițializare temporizator pentru comenzi
  lastCommandTime = millis();
}

void loop() {
  // ------------------------------
  // 4.6 Timeout: Dacă nu se primește nicio comandă timp de TIMEOUT_MS,
  // se oprește mașina (viteza = 0 și registru de shift la STOP)
  // ------------------------------
  if (millis() - lastCommandTime > TIMEOUT_MS) {
    setMotorSpeed(0);
    updateShiftRegister(0b00000000);
  }
  delay(90);  // Mică întârziere pentru reducerea utilizării CPU
}
